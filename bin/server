var path = require('path');
var colors = require('colors');
var staticServer = require('node-static');
var http = require('http');
var argv = require('optimist').argv;

/*
Variables and Function Declarations
*/

var port, address, root, cache, fileServer;

var helpMenu = [
  "",
  "usage: node bin/server [options]",
  "",
  "options:",
  " -p Port assignment [8080 by default]",
  " -a Address assignment [localhost by default]",
  " -r Root assignment [./public by default]",
  " -c Cache expiration assignment [3600 by default]",
  " -s Suppress logging from output",
  " -h Pull up the help menu in case you freak out"
].join('\n');

function log (message) {
  if (!argv.s && !argv.silent) console.log(message);
};

/*
Procedure
*/


if (argv.h) return console.log(helpMenu);

try {

  // we've assigned address ("host") to one determined by user, or localhost by default.
  // cache refers to the length of time in seconds that served files are cached

  port = argv.p || 8080; 
  address = argv.a || "localhost";
  root = argv.r || "./public"; 
  cache = argv.c || 3600;
  fileServer = new(staticServer.Server)(root, { cache: parseInt(cache) }); // pass in catch option to node-static

  log("Starting up web server for: ".yellow + root.cyan + " on port: ".yellow + port.toString().cyan);

  try {
    http.createServer(function (request, response) {
      request.addListener('end', function () {
        fileServer.serve(request, response, function(err, data) {
          if (err) {
            console.error("Error serving " + request.url + " - " + err.message);
            response.writeHead(err.status, err.headers);
            response.end();
          }
          log('['.grey+'SERVED'.yellow+'] '.grey + request.url);
        })
      }).resume();
    }).listen(port, address); // we pass the address option to listen()
  } catch (err) {
    return callback({
      message: err.message
    });
  }

  log("Web server started at ".green + address.cyan + ":".cyan + port.toString().cyan);
  log("Press Ctrl-C to stop server at any time.");

  process.on("SIGINT", function() {
    log("Web server stopped".red);
    return process.exit();
  })

} catch (err) {
  log(err, console.dir(options));
}
